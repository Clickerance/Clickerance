{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","App","width","height","name","email","message","contactRef","useRef","exact","path","className","style","paddingTop","paddingBottom","Button","onClick","current","scrollIntoView","behavior","appearance","marginTop","minorScale","Icon","icon","color","ref","paddingLeft","marginRight","display","Boolean","location","hostname","match","smoothscroll","polyfill","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAMIA,EAAgB,WAAO,IAAD,EACEC,mBAAS,CAAC,EAAG,IADf,mBACfC,EADe,KACTC,EADS,KAWtB,OATAC,2BAAgB,WACZ,IAAIC,EAAa,WACbF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,eAKvC,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IACIH,GAqDIS,MAlDf,WAAgB,IAAD,EACaX,IADb,mBACJY,EADI,KACGC,EADH,OAE2BZ,mBAAS,CAC3Ca,KAAM,GACNC,MAAO,GACPC,QAAS,KALF,mBAOLC,GAPK,UAOQC,iBAAO,OAC1B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,yBAAKC,UAAU,OACX,yBAAKA,UAAU,SAASC,MAAO,CAACC,WAAYV,EAAS,EAAGW,cAAeX,EAAS,IAC5E,yBAAKQ,UAAU,QACX,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,YAAd,kEACA,kBAACI,EAAA,EAAD,CAAQC,QAAS,WACbT,EAAWU,QAAQC,eAAe,CAACC,SAAU,YAC9CC,WAAW,UAAUC,UAAWlB,EAAS,EAAGA,OAAQmB,YAAW,KAC9D,kBAACC,EAAA,EAAD,CAAMC,KAAK,eAAeC,MAAM,OAAOjC,KAAM8B,YAAW,SAIpE,yBAAKX,UAAU,UAAUe,IAAKnB,EACzBK,MAAO,CAACe,YAAazB,EAAQ,GAAIY,cAAeQ,YAAW,IAAKM,YAAa1B,EAAQ,KACtF,wBAAIS,UAAU,YAAd,WAGA,2DAAgC,0BAC5BC,MAAO,CAACiB,QAAS,WAAY,YADjC,IACoD,0BAChDjB,MAAO,CAACiB,QAAS,WAAY,eAFjC,IAEuD,0BACnDjB,MAAO,CAACiB,QAAS,WAAY,OAHjC,QAQZ,kBAAC,IAAD,CAAOpB,OAAK,EAACC,KAAK,QACd,yBAAKC,UAAU,SAASC,MAAO,CAACC,WAAYV,EAAS,EAAGW,cAAeX,EAAS,IAC5E,yBAAKQ,UAAU,QACX,wBAAIA,UAAU,YAAd,oCChDRmB,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2D,mBCTNC,EAAaC,WAEb,IAAMC,EAAcC,SAASC,eAAe,QAExCF,EAAYG,gBACZC,kBAAQ,kBAAC,EAAD,MAAQJ,GAEhBK,iBAAO,kBAAC,EAAD,MAAQL,GDmHb,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.00623999.chunk.js","sourcesContent":["import React, {useState, useLayoutEffect, useRef} from 'react';\nimport './App.css';\nimport {TextInput, minorScale, Button, Alert, Textarea, Icon} from \"evergreen-ui\";\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\n\n\nlet useWindowSize = () => {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n        let updateSize = () => {\n            setSize([window.innerWidth, window.innerHeight]);\n        };\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n};\n\nfunction App() {\n    const [width, height] = useWindowSize();\n    const [contactForm, setContactForm] = useState({\n        name: '',\n        email: '',\n        message: '',\n    });\n    const contactRef = useRef(null);\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <div className=\"App\">\n                        <div className=\"Header\" style={{paddingTop: height / 4, paddingBottom: height / 4}}>\n                            <div className=\"text\">\n                                <h1 className=\"Heading1\">Clickerance</h1>\n                                <h3 className=\"Heading2\">Shopping with food preferences and intolerances just got easy!</h3>\n                                <Button onClick={() => {\n                                    contactRef.current.scrollIntoView({behavior: 'smooth'})\n                                }} appearance=\"minimal\" marginTop={height / 8} height={minorScale(15)}>\n                                    <Icon icon=\"chevron-down\" color=\"#fff\" size={minorScale(15)}/>\n                                </Button>\n                            </div>\n                        </div>\n                        <div className=\"Contact\" ref={contactRef}\n                             style={{paddingLeft: width / 25, paddingBottom: minorScale(10), marginRight: width / 10}}>\n                            <h1 className=\"Heading1\">\n                                Contact\n                            </h1>\n                            <p>To get in touch please email <code\n                                style={{display: 'inline'}}>{\"santiago\"}</code>@<code\n                                style={{display: 'inline'}}>{\"clickerance\"}</code>.<code\n                                style={{display: 'inline'}}>{\"com\"}</code>.\n                            </p>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path=\"/404\">\n                    <div className=\"Header\" style={{paddingTop: height / 4, paddingBottom: height / 4}}>\n                        <div className=\"text\">\n                            <h1 className=\"Heading1\">Error 404. Page not found.</h1>\n                        </div>\n                    </div>\n                </Route>\n            </Switch>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {hydrate, render} from \"react-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport smoothscroll from 'smoothscroll-polyfill';\n\nsmoothscroll.polyfill();\n\nconst rootElement = document.getElementById('root');\n\nif (rootElement.hasChildNodes()) {\n    hydrate(<App/>, rootElement)\n} else {\n    render(<App/>, rootElement)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}